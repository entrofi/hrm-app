package net.entrofi.hrm.util.data;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.util.StringUtils;

import java.util.ArrayList;
import java.util.List;

/**
 * @author Hasan COMAK
 */
public final class SpringPagingHelper {

    public static final String DEFAULT_DIRECTION_DELIMITER = ",";

    private static final Logger LOGGER = LoggerFactory.getLogger(SpringPagingHelper.class);

    private SpringPagingHelper() {

    }

    /**
     * Generate a pageable instance using the parameters provided.
     *
     * @param limit page limit
     * @param offset result offset
     * @param sortQuery string representation of sort query
     * @return pageable instance generated by the parameters
     */
    public static Pageable generatePageable(final int limit, final int offset, final String sortQuery) {
        return generatePageable(limit, offset, sortQuery, DEFAULT_DIRECTION_DELIMITER);
    }


    /**
     * Generate a pageable instance using the parameters provided.
     *
     * @param limit page limit
     * @param offset result offset
     * @param sortQuery string representation of sort query
     * @param sortDirectionDelimiter delimiter for sort direction
     * @return pageable instance generated by the parameters
     */
    public static Pageable generatePageable(final int limit, final int offset, final String sortQuery,
                                            final String sortDirectionDelimiter) {
        if (!isInLimitOffsetBoundary(limit, offset)) {
            return null;
        }
        boolean sortEmpty = StringUtils.isEmpty(sortQuery);
        boolean delimiterEmpty = StringUtils.isEmpty(sortDirectionDelimiter);
        Sort sort;
        PageRequest pageRequest = new PageRequest(offset, limit);
        if (!sortEmpty && !delimiterEmpty) {
            sort = parseSort(sortQuery, sortDirectionDelimiter);
           pageRequest = new PageRequest(offset, limit, sort);
        } else if (!sortEmpty && delimiterEmpty) {
            sort = parseSort(sortQuery, DEFAULT_DIRECTION_DELIMITER);
            pageRequest = new PageRequest(offset, limit, sort);
        }
        return pageRequest;
    }


    /**
     * Generate a pageable instance using the parameters provided.
     *
     * @param limit page limit
     * @param offset sequence offset
     * @param sort sort
     * @return pageable instance
     */
    public static Pageable generatePageable(final int limit, final int offset, final Sort sort) {
        if (!isInLimitOffsetBoundary(limit, offset)) {
            return null;
        }
        return new PageRequest(offset, limit, sort);
    }

    /**
     *
     * @param source
     * @param directionDelimiter
     * @return
     */
    public static Sort parseSort(final String source, final String directionDelimiter) {
        LOGGER.debug("Parsing page sort matrix..." + source);
        if (StringUtils.isEmpty(source)) {
            return null;
        }
        List<Sort.Order> orderList = new ArrayList<Sort.Order>();
        String[] ordersStrings = source.split("\\&");

        for (String orderParam : ordersStrings) {
            String[] parts = orderParam.split(directionDelimiter);

            Sort.Direction direction = parts.length <= 1 ? null : Sort.Direction.fromString(parts[parts.length - 1]);

            for (int i = 0; i < parts.length; i++) {
                if (i == parts.length - 1 && direction != null) {
                    continue;
                }
                String property = parts[i];
                if (StringUtils.hasText(property)) {
                    orderList.add(new Sort.Order(direction, property));
                }
            }
        }
        return orderList.isEmpty() ? null : new Sort(orderList);
    }

    /**
     * Generates a page from the provided list and pageable parameters
     * @param list page entity list
     * @param pageable the pageable to generate page for
     * @param <T> page entity
     * @return
     */
    public static <T> Page<T> generatePage(final List<T> list, final Pageable pageable) {
        if (pageable == null) {
            return new PageImpl<>(list);
        }
        int lastOffset = pageable.getOffset() + pageable.getPageSize();
        if (lastOffset > list.size()) {
            lastOffset = list.size();
        }
        return new PageImpl<>(list.subList(pageable.getOffset(), lastOffset), pageable, list.size());
    }


    private static boolean isInLimitOffsetBoundary(final int limit, final int offset) {
        if (limit > 0 && offset >= 0) {
            return true;
        }
        return false;
    }
}
